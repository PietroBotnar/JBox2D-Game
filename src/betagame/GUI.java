package betagame;
/*
AUTHOR PETRU BOTNAR
this class creates a main gui that is shown starting the game
offers option of changing ball image
shows top 10 highscores
buttons NewGame, Exit
*/

import city.cs.engine.UserView;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Image;
import java.io.IOException;
import static java.lang.Math.abs;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;


public class GUI extends javax.swing.JPanel implements ChangeListener{
    
    private BetaGame game;
    private JFrame frame;
    private BallPlayer ball;
    private UserView view;
    private Container buttons;
    private UserView wideView;
    private Image image;
    private HighScoreReadWrite hsReader;
    
    private List<ChangeListener> listeners;
    private int imageIndex;
    
    public GUI(BetaGame game, JFrame frame, BallPlayer ball) {
        initComponents();
        this.game = game;
        this.frame = frame;
        this.ball = ball;
        
        //reading highscores
        HighScoreReadWrite hsReader = new HighScoreReadWrite("data/highscores.txt");
        try {
            hsReader.readScores();
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        int j = 10;
        if(hsReader.getHighscoreList().size()<j){
                    j = hsReader.getHighscoreList().size();
                }
        highScorePanel.setLayout(new GridLayout(j,2,75,5));
        highScorePanel.setBackground(Color.yellow);
        //creating and adding highscore labels
        
            for(int i=0;i<j;i++){
                
                ScoreLine x = hsReader.getHighscoreList().get(i);
                JLabel name = new JLabel("  "+x.getName());
                name.setFont(new Font("Helvetica", Font.BOLD, 14));
                highScorePanel.add(name,BorderLayout.WEST);
                JLabel score = new JLabel(x.getStringScore());
                highScorePanel.add(score,BorderLayout.EAST);
                score.setFont(new Font("Helvetica", Font.BOLD, 16));
            }
     //   }
        //initiliasing a list of ChangeListeners to keep track of the image changes
        this.listeners = new LinkedList<ChangeListener>();  
        this.addChangeListener(this);
        image = new ImageIcon(ball.getImagesLinks().get(0)).getImage();
        
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.drawImage(new ImageIcon(ball.getImagesLinks().get(imageIndex)).getImage(),50,80,this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        newGameButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        highScorePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        rightArrowButton = new javax.swing.JButton();
        leftArrowButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 0, 0));

        newGameButton.setBackground(new java.awt.Color(65, 57, 57));
        newGameButton.setFont(new java.awt.Font("DigifaceWide", 1, 24)); // NOI18N
        newGameButton.setForeground(new java.awt.Color(0, 204, 0));
        newGameButton.setText("new game");
        newGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameButtonActionPerformed(evt);
            }
        });

        exitButton.setBackground(new java.awt.Color(65, 57, 57));
        exitButton.setFont(new java.awt.Font("DigifaceWide", 1, 24)); // NOI18N
        exitButton.setForeground(new java.awt.Color(255, 0, 0));
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        highScorePanel.setInheritsPopupMenu(true);
        highScorePanel.setMaximumSize(new java.awt.Dimension(32767, 200));

        javax.swing.GroupLayout highScorePanelLayout = new javax.swing.GroupLayout(highScorePanel);
        highScorePanel.setLayout(highScorePanelLayout);
        highScorePanelLayout.setHorizontalGroup(
            highScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        highScorePanelLayout.setVerticalGroup(
            highScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("DigifaceWide", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("-Highscores-");

        rightArrowButton.setBackground(new java.awt.Color(102, 255, 102));
        rightArrowButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rightArrowButton.setText(">>>");
        rightArrowButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        rightArrowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightArrowButtonActionPerformed(evt);
            }
        });

        leftArrowButton.setBackground(new java.awt.Color(102, 255, 102));
        leftArrowButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        leftArrowButton.setText("<<<");
        leftArrowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftArrowButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(newGameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(leftArrowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rightArrowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(highScorePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(highScorePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 192, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rightArrowButton)
                            .addComponent(leftArrowButton))
                        .addGap(53, 53, 53)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(newGameButton, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                    .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void newGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameButtonActionPerformed
        ball.setBallImage(imageIndex);
        ball.setBallPhysics(imageIndex);
        frame.add(game.getView());
        frame.add(game.getButtons(),BorderLayout.NORTH);
        frame.add(game.getWideView(), BorderLayout.SOUTH);
        frame.addKeyListener(game.getController());
        frame.remove(this);
        frame.setVisible(true);
        frame.setExtendedState(Frame.MAXIMIZED_BOTH);

    }//GEN-LAST:event_newGameButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void rightArrowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightArrowButtonActionPerformed
        imageIndex++;
        imageIndex = imageIndex%ball.getImagesLinks().size();
        image = new ImageIcon(ball.getImagesLinks().get(imageIndex)).getImage();
        changed();
    }//GEN-LAST:event_rightArrowButtonActionPerformed

    private void leftArrowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftArrowButtonActionPerformed
        imageIndex++;
        imageIndex = abs(imageIndex)%ball.getImagesLinks().size();
        image = new ImageIcon(ball.getImagesLinks().get(imageIndex)).getImage();
        changed();
        
    }//GEN-LAST:event_leftArrowButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exitButton;
    private javax.swing.JPanel highScorePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JButton leftArrowButton;
    private javax.swing.JButton newGameButton;
    private javax.swing.JButton rightArrowButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void stateChanged(ChangeEvent ce) {
        repaint();
    }
    /**
     * Register a listener to be notifed whenever the gui changes.
     * @param listener the listener to add
     */
    public void addChangeListener(ChangeListener l) {
        listeners.add(l);
    }
    
    /**
     * Unregister a change listener.
     * Does nothing if the listener is not registered.
     * @param listener the listener to remove
     */
    public void removeChangeListener(ChangeListener l) {
        listeners.remove(l);
    }
    
    /**
     * Notify all listeners that the gui has changed.
     * This method should be called by any method of a child class that
     * modifies the child data.
     */
    protected void changed() {
        ChangeEvent e = new ChangeEvent(this);
        for (ChangeListener l : listeners) {
            l.stateChanged(e);
        }
    }

    public int getImageIndex() {
        return imageIndex;
    }
    
}
